name: Bootstrap Kubernetes Cluster

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Initialize Kubernetes Cluster"]
    types:
      - completed

jobs:
  bootstrap:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Test SSH connectivity
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.CONTROL_PLANE_IP }}
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "SSH connection successful"
          whoami
          pwd
          ls -la /home/ubuntu/ || true
          ls -la /etc/kubernetes/ || true

    - name: Get and prepare kubeconfig from control plane
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.CONTROL_PLANE_IP }}
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        timeout: 60s
        command_timeout: 120s
        script: |
          echo "=== Checking if kubeconfig exists ==="
          
          # First check if kubectl is working
          if command -v kubectl &> /dev/null; then
            echo "kubectl is installed"
          else
            echo "kubectl not found"
          fi
          
          # Check for kubeconfig in user directory
          if [ -f /home/ubuntu/.kube/config ]; then
            echo "✅ Kubeconfig exists in user directory"
          elif [ -f /etc/kubernetes/admin.conf ]; then
            echo "Found admin.conf, copying to user directory..."
            mkdir -p /home/ubuntu/.kube
            sudo cp /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
            sudo chown ubuntu:ubuntu /home/ubuntu/.kube/config
            echo "✅ Kubeconfig copied successfully"
          else
            echo "❌ ERROR: No kubeconfig found anywhere"
            echo "Available files in /etc/kubernetes/:"
            sudo ls -la /etc/kubernetes/ || true
            exit 1
          fi
          
          # Verify file has content
          if [ ! -s /home/ubuntu/.kube/config ]; then
            echo "❌ ERROR: Kubeconfig file is empty"
            exit 1
          fi
          
          echo "✅ Kubeconfig file has content ($(wc -c < /home/ubuntu/.kube/config) bytes)"
          
          # Show current server address
          echo "=== Current server address ==="
          grep "server:" /home/ubuntu/.kube/config || echo "No server line found"
          
          # Update server address to use public IP
          echo "=== Updating server address ==="
          CONTROL_PLANE_IP="${{ secrets.CONTROL_PLANE_IP }}"
          cp /home/ubuntu/.kube/config /home/ubuntu/.kube/config.backup
          sed -i "s|server: https://.*:6443|server: https://$CONTROL_PLANE_IP:6443|g" /home/ubuntu/.kube/config
          
          echo "=== Updated server address ==="
          grep "server:" /home/ubuntu/.kube/config
          
          # Output the base64 encoded kubeconfig
          echo "START_KUBECONFIG_BASE64"
          cat /home/ubuntu/.kube/config | base64 -w 0
          echo ""
          echo "END_KUBECONFIG_BASE64"
        script_stop: true
      id: get_kubeconfig

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        
        # Extract the base64 kubeconfig from SSH output
        FULL_OUTPUT="${{ steps.get_kubeconfig.outputs.stdout }}"
        echo "=== Extracting kubeconfig from SSH output ==="
        
        # Extract content between markers
        BASE64_CONTENT=$(echo "$FULL_OUTPUT" | sed -n '/START_KUBECONFIG_BASE64/,/END_KUBECONFIG_BASE64/p' | grep -v "START_KUBECONFIG_BASE64\|END_KUBECONFIG_BASE64" | tr -d '\n')
        
        if [ -z "$BASE64_CONTENT" ]; then
          echo "❌ ERROR: Could not extract base64 content"
          echo "Full SSH output:"
          echo "$FULL_OUTPUT"
          exit 1
        fi
        
        # Decode and save kubeconfig
        echo "$BASE64_CONTENT" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config
        
        # Verify the file
        if [ ! -s ~/.kube/config ]; then
          echo "❌ ERROR: Decoded kubeconfig is empty"
          exit 1
        fi
        
        echo "✅ Kubeconfig configured successfully ($(wc -c < ~/.kube/config) bytes)"

    - name: Verify cluster connection
      run: |
        echo "=== Testing cluster connection ==="
        echo "Kubeconfig server:"
        grep "server:" ~/.kube/config
        
        echo "=== Cluster info ==="
        kubectl cluster-info --request-timeout=30s || echo "Cluster info failed"
        
        echo "=== Get nodes ==="
        kubectl get nodes --request-timeout=30s || echo "Get nodes failed"

    - name: Wait for cluster to be ready
      run: |
        echo "=== Waiting for nodes to be ready ==="
        kubectl wait --for=condition=Ready nodes --all --timeout=300s

    - name: Install cert-manager
      run: |
        echo "=== Installing cert-manager ==="
        kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v1.13.0/cert-manager.yaml
        kubectl wait --for=condition=available deployment/cert-manager -n cert-manager --timeout=300s
        kubectl wait --for=condition=available deployment/cert-manager-cainjector -n cert-manager --timeout=300s
        kubectl wait --for=condition=available deployment/cert-manager-webhook -n cert-manager --timeout=300s

    - name: Create namespaces
      run: |
        echo "=== Creating namespaces ==="
        kubectl apply -f k8s/namespaces/

    - name: Install metrics-server
      run: |
        echo "=== Installing metrics-server ==="
        kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
        # Patch metrics-server for development environments
        kubectl patch deployment metrics-server -n kube-system --type='json' -p='[
          {
            "op": "add",
            "path": "/spec/template/spec/containers/0/args/-",
            "value": "--kubelet-insecure-tls"
          }
        ]'
        kubectl wait --for=condition=available deployment/metrics-server -n kube-system --timeout=300s

    - name: Install Nginx Ingress Controller
      run: |
        echo "=== Installing Nginx Ingress Controller ==="
        kubectl apply -f k8s/nginx-ingress/
        kubectl wait --for=condition=available deployment/nginx-ingress-controller -n ingress-nginx --timeout=300s

    - name: Install ArgoCD
      run: |
        echo "=== Installing ArgoCD ==="
        kubectl create namespace argocd || true
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        
        # Wait for ArgoCD to be ready
        kubectl wait --for=condition=available deployment/argocd-server -n argocd --timeout=600s
        
        # Patch ArgoCD server for LoadBalancer access
        kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'

    - name: Create cert-manager issuers
      run: |
        echo "=== Creating cert-manager issuers ==="
        kubectl apply -f k8s/cert-manager/

    - name: Install monitoring stack
      run: |
        echo "=== Installing monitoring stack ==="
        kubectl apply -f k8s/monitoring/prometheus/
        kubectl apply -f k8s/monitoring/grafana/
        
        # Wait for monitoring components
        kubectl wait --for=condition=available deployment/prometheus -n monitoring --timeout=300s
        kubectl wait --for=condition=available deployment/grafana -n monitoring --timeout=300s

    - name: Configure ArgoCD applications
      run: |
        echo "=== Configuring ArgoCD applications ==="
        # Wait a bit more for ArgoCD to be fully ready
        sleep 60
        
        # Apply ArgoCD applications
        kubectl apply -f k8s/argocd/applications.yaml

    - name: Get access information
      run: |
        echo "=== Cluster Access Information ==="
        echo "ArgoCD Server:"
        kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || \
        kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
        echo ""
        
        echo "Grafana Dashboard:"
        kubectl get svc grafana-service -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || \
        kubectl get svc grafana-service -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
        echo ""
        
        echo "Nginx Ingress Controller:"
        kubectl get svc ingress-nginx -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || \
        kubectl get svc ingress-nginx -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
        echo ""
        
        echo "ArgoCD Admin Password:"
        kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
        echo ""