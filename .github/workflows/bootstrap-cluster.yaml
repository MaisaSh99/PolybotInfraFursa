name: Bootstrap Kubernetes Cluster

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Initialize Kubernetes Cluster"]
    types:
      - completed

jobs:
  bootstrap:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Get kubeconfig from control plane
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.CONTROL_PLANE_IP }}
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        timeout: 60s
        script: |
          echo "=== Getting kubeconfig from control plane ==="
          
          PUBLIC_IP="${{ secrets.CONTROL_PLANE_IP }}"
          
          # Get the client certificate and key from the admin config
          CLIENT_CERT=$(sudo grep client-certificate-data /etc/kubernetes/admin.conf | awk '{print $2}')
          CLIENT_KEY=$(sudo grep client-key-data /etc/kubernetes/admin.conf | awk '{print $2}')
          
          # Create kubeconfig for GitHub Actions (without CA cert, using insecure-skip-tls-verify)
          cat > /tmp/github-kubeconfig << EOF
          apiVersion: v1
          clusters:
          - cluster:
              server: https://$PUBLIC_IP:6443
              insecure-skip-tls-verify: true
            name: kubernetes
          contexts:
          - context:
              cluster: kubernetes
              user: kubernetes-admin
            name: kubernetes-admin@kubernetes
          current-context: kubernetes-admin@kubernetes
          kind: Config
          preferences: {}
          users:
          - name: kubernetes-admin
            user:
              client-certificate-data: $CLIENT_CERT
              client-key-data: $CLIENT_KEY
          EOF
          
          # Test the kubeconfig locally first
          echo "=== Testing kubeconfig locally ==="
          if kubectl --kubeconfig=/tmp/github-kubeconfig get nodes; then
            echo "✅ Kubeconfig test successful"
          else
            echo "❌ Kubeconfig test failed"
            exit 1
          fi
          
          # Output the base64 encoded kubeconfig
          echo "KUBECONFIG_START"
          cat /tmp/github-kubeconfig | base64 -w 0
          echo ""
          echo "KUBECONFIG_END"
      id: get_kubeconfig

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        
        # Extract kubeconfig from SSH output
        FULL_OUTPUT="${{ steps.get_kubeconfig.outputs.stdout }}"
        echo "=== Extracting kubeconfig ==="
        
        # Extract base64 content between markers
        BASE64_CONTENT=$(echo "$FULL_OUTPUT" | sed -n '/KUBECONFIG_START/,/KUBECONFIG_END/p' | grep -v "KUBECONFIG_START\|KUBECONFIG_END" | tr -d '\n')
        
        if [ -z "$BASE64_CONTENT" ]; then
          echo "❌ Failed to extract kubeconfig from SSH output"
          echo "=== Full SSH Output ==="
          echo "$FULL_OUTPUT"
          exit 1
        fi
        
        # Decode kubeconfig
        echo "$BASE64_CONTENT" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config
        
        # Verify kubeconfig
        if [ ! -s ~/.kube/config ]; then
          echo "❌ Kubeconfig file is empty"
          exit 1
        fi
        
        echo "✅ Kubeconfig configured ($(wc -c < ~/.kube/config) bytes)"
        
        # Show server configuration (without sensitive data)
        echo "=== Kubeconfig server ==="
        grep "server:" ~/.kube/config

    - name: Test cluster connection
      run: |
        echo "=== Testing cluster connection ==="
        kubectl cluster-info --request-timeout=30s
        kubectl get nodes --request-timeout=30s

    - name: Wait for cluster to be ready
      run: |
        echo "=== Waiting for all nodes to be ready ==="
        kubectl wait --for=condition=Ready nodes --all --timeout=300s

    - name: Create namespaces
      run: |
        echo "=== Creating namespaces ==="
        kubectl apply -f k8s/namespaces/
        kubectl get namespaces

    - name: Install cert-manager
      run: |
        echo "=== Installing cert-manager ==="
        kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v1.13.0/cert-manager.yaml
        
        echo "=== Waiting for cert-manager to be available ==="
        kubectl wait --for=condition=available deployment/cert-manager -n cert-manager --timeout=300s
        kubectl wait --for=condition=available deployment/cert-manager-cainjector -n cert-manager --timeout=300s
        kubectl wait --for=condition=available deployment/cert-manager-webhook -n cert-manager --timeout=300s

    - name: Install metrics-server
      run: |
        echo "=== Installing metrics-server ==="
        kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
        
        # Patch metrics-server for development environments
        kubectl patch deployment metrics-server -n kube-system --type='json' -p='[
          {
            "op": "add",
            "path": "/spec/template/spec/containers/0/args/-",
            "value": "--kubelet-insecure-tls"
          }
        ]'
        
        echo "=== Waiting for metrics-server ==="
        kubectl wait --for=condition=available deployment/metrics-server -n kube-system --timeout=300s

    - name: Install Nginx Ingress Controller
      run: |
        echo "=== Installing Nginx Ingress Controller ==="
        kubectl apply -f k8s/nginx-ingress/
        
        echo "=== Waiting for Nginx Ingress Controller ==="
        kubectl wait --for=condition=available deployment/nginx-ingress-controller -n ingress-nginx --timeout=300s

    - name: Install ArgoCD
      run: |
        echo "=== Installing ArgoCD ==="
        kubectl create namespace argocd || true
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        
        echo "=== Waiting for ArgoCD server ==="
        kubectl wait --for=condition=available deployment/argocd-server -n argocd --timeout=600s
        
        echo "=== Patching ArgoCD server for LoadBalancer ==="
        kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'

    - name: Create cert-manager issuers
      run: |
        echo "=== Creating cert-manager issuers ==="
        kubectl apply -f k8s/cert-manager/

    - name: Install monitoring stack
      run: |
        echo "=== Installing monitoring stack ==="
        kubectl apply -f k8s/monitoring/prometheus/
        kubectl apply -f k8s/monitoring/grafana/
        
        echo "=== Waiting for monitoring components ==="
        kubectl wait --for=condition=available deployment/prometheus -n monitoring --timeout=300s
        kubectl wait --for=condition=available deployment/grafana -n monitoring --timeout=300s

    - name: Configure ArgoCD applications
      run: |
        echo "=== Configuring ArgoCD applications ==="
        sleep 60  # Wait for ArgoCD to be fully ready
        kubectl apply -f k8s/argocd/applications.yaml

    - name: Get access information
      run: |
        echo "=== 🎉 KUBERNETES CLUSTER BOOTSTRAP COMPLETE! 🎉 ==="
        echo ""
        echo "=== Cluster Information ==="
        echo "Control Plane IP: ${{ secrets.CONTROL_PLANE_IP }}"
        echo "Kubernetes API: https://${{ secrets.CONTROL_PLANE_IP }}:6443"
        echo ""
        
        echo "=== 🔐 ArgoCD Admin Password ==="
        ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" 2>/dev/null | base64 -d || echo "Not found")
        echo "Username: admin"
        echo "Password: $ARGOCD_PASSWORD"
        echo ""
        
        echo "=== 📊 Service Endpoints ==="
        echo "ArgoCD Server:"
        kubectl get svc argocd-server -n argocd -o wide 2>/dev/null || echo "  Not ready yet"
        echo ""
        echo "Grafana Dashboard:"
        kubectl get svc grafana-service -n monitoring -o wide 2>/dev/null || echo "  Not ready yet"
        echo ""
        echo "Nginx Ingress Controller:"
        kubectl get svc ingress-nginx -n ingress-nginx -o wide 2>/dev/null || echo "  Not ready yet"
        echo ""
        
        echo "=== 📈 Cluster Status ==="
        kubectl get nodes
        echo ""
        
        echo "=== 🚀 All Deployments ==="
        kubectl get deployments --all-namespaces
        echo ""
        
        echo "=== ✅ BOOTSTRAP SUCCESSFUL! ==="
        echo "Your Kubernetes cluster is now ready for use!"