name: Bootstrap Kubernetes Cluster

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Initialize Kubernetes Cluster"]
    types:
      - completed

jobs:
  bootstrap:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Get kubeconfig from control plane
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.CONTROL_PLANE_IP }}
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        timeout: 60s
        command_timeout: 120s
        script: |
          echo "=== Checking cluster status ==="
          
          # Ensure kubeconfig exists and is properly configured
          if [ ! -f ~/.kube/config ]; then
            echo "Setting up kubeconfig..."
            mkdir -p ~/.kube
            sudo cp /etc/kubernetes/admin.conf ~/.kube/config
            sudo chown ubuntu:ubuntu ~/.kube/config
            
            # Update to use public IP
            PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
            sed -i "s|server: https://.*:6443|server: https://$PUBLIC_IP:6443|g" ~/.kube/config
          fi
          
          echo "=== Testing local kubectl ==="
          kubectl get nodes || echo "kubectl failed locally"
          
          echo "=== Outputting kubeconfig ==="
          cat ~/.kube/config | base64 -w 0
      id: get_kubeconfig

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ steps.get_kubeconfig.outputs.stdout }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config

    - name: Test cluster connection
      run: |
        echo "=== Testing cluster connection ==="
        kubectl cluster-info
        kubectl get nodes

    - name: Wait for cluster to be ready
      run: |
        echo "=== Waiting for nodes to be ready ==="
        kubectl wait --for=condition=Ready nodes --all --timeout=300s

    - name: Install cert-manager
      run: |
        echo "=== Installing cert-manager ==="
        kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v1.13.0/cert-manager.yaml
        kubectl wait --for=condition=available deployment/cert-manager -n cert-manager --timeout=300s
        kubectl wait --for=condition=available deployment/cert-manager-cainjector -n cert-manager --timeout=300s
        kubectl wait --for=condition=available deployment/cert-manager-webhook -n cert-manager --timeout=300s

    - name: Create namespaces
      run: |
        echo "=== Creating namespaces ==="
        kubectl apply -f k8s/namespaces/

    - name: Install metrics-server
      run: |
        echo "=== Installing metrics-server ==="
        kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
        # Patch metrics-server for development environments
        kubectl patch deployment metrics-server -n kube-system --type='json' -p='[
          {
            "op": "add",
            "path": "/spec/template/spec/containers/0/args/-",
            "value": "--kubelet-insecure-tls"
          }
        ]'
        kubectl wait --for=condition=available deployment/metrics-server -n kube-system --timeout=300s

    - name: Install Nginx Ingress Controller
      run: |
        echo "=== Installing Nginx Ingress Controller ==="
        kubectl apply -f k8s/nginx-ingress/
        kubectl wait --for=condition=available deployment/nginx-ingress-controller -n ingress-nginx --timeout=300s

    - name: Install ArgoCD
      run: |
        echo "=== Installing ArgoCD ==="
        kubectl create namespace argocd || true
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        
        # Wait for ArgoCD to be ready
        kubectl wait --for=condition=available deployment/argocd-server -n argocd --timeout=600s
        
        # Patch ArgoCD server for LoadBalancer access
        kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'

    - name: Create cert-manager issuers
      run: |
        echo "=== Creating cert-manager issuers ==="
        kubectl apply -f k8s/cert-manager/

    - name: Install monitoring stack
      run: |
        echo "=== Installing monitoring stack ==="
        kubectl apply -f k8s/monitoring/prometheus/
        kubectl apply -f k8s/monitoring/grafana/
        
        # Wait for monitoring components
        kubectl wait --for=condition=available deployment/prometheus -n monitoring --timeout=300s
        kubectl wait --for=condition=available deployment/grafana -n monitoring --timeout=300s

    - name: Configure ArgoCD applications
      run: |
        echo "=== Configuring ArgoCD applications ==="
        # Wait a bit more for ArgoCD to be fully ready
        sleep 60
        
        # Apply ArgoCD applications
        kubectl apply -f k8s/argocd/applications.yaml

    - name: Get access information
      run: |
        echo "=== Cluster Access Information ==="
        echo "Control Plane IP: ${{ secrets.CONTROL_PLANE_IP }}"
        echo ""
        echo "ArgoCD Server:"
        kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || \
        kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || \
        echo "LoadBalancer IP not yet assigned"
        echo ""
        
        echo "Grafana Dashboard:"
        kubectl get svc grafana-service -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || \
        kubectl get svc grafana-service -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || \
        echo "LoadBalancer IP not yet assigned"
        echo ""
        
        echo "Nginx Ingress Controller:"
        kubectl get svc ingress-nginx -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || \
        kubectl get svc ingress-nginx -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || \
        echo "LoadBalancer IP not yet assigned"
        echo ""
        
        echo "ArgoCD Admin Password:"
        kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" 2>/dev/null | base64 -d || echo "Secret not found"
        echo ""
        
        echo "=== All deployments ==="
        kubectl get deployments --all-namespaces